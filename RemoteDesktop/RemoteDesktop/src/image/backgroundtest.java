/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package image;

import static image.ImageFrame.updateGraphics;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import remotedesktop.transferWork.FileTransferReceiver;

/**
 *
 * @author arghasarkar
 */
public class backgroundtest extends javax.swing.JFrame {
   
    public static String pathToIcon1 = "/Users/arghasarkar/Documents/test1.jpg";
    public static String pathToIcon2 = "/Users/arghasarkar/Documents/test2.jpg";
    public boolean curImage = false;
    public boolean firstImage = false;
    
    public int usePort = 8001;
    public int useDelay = 1000;
    
    ActionListener taskPerformer;                                               //DECLARES A NEW ACTION LISTENER TO BE USED FOR THE TIMER
    javax.swing.Timer doTask = new javax.swing.Timer(useDelay, taskPerformer);                  //SETS UP TIMER
    /**
     * Creates new form backgroundtest
     */
    @SuppressWarnings("empty-statement")
    public backgroundtest() {
        initComponents();  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start Screen");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setIcon(getImageIcon(pathToIcon1));
        jLabel1.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .add(0, 605, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
        int testCount;
            @Override
            public void run() {
                System.out.println(testCount++ + "hii");
                updateGraphics();
                
                System.out.println(testCount++ + "hii2");
            }
        }, 0, useDelay);
            
        
    }//GEN-LAST:event_jButton1MouseClicked
    
    public void updateGraphics() {
        //jLabel1 = null;
        //jLabel1 = new JLabel();
        
        if (curImage == false) {
            curImage = true;
            if (firstImage == false) {
                System.out.println("curImage: " + curImage + "   firstImage: " + firstImage);
                firstImage = true;
                FileTransferReceiver ftr = new FileTransferReceiver(usePort, pathToIcon1);
                ftr.startReceiver();
            } else {
                System.out.println("curImage: " + curImage + "   firstImage: " + firstImage);
                FileTransferReceiver ftr = new FileTransferReceiver(usePort, pathToIcon1);
                ftr.startReceiver();
                jLabel1.setIcon(getImageIcon(pathToIcon2));  
            }
        } else {
            curImage = false;
            System.out.println("curImage: " + curImage + "   firstImage: " + firstImage);
            FileTransferReceiver ftr = new FileTransferReceiver(usePort, pathToIcon2);
            ftr.startReceiver();
            jLabel1.setIcon(getImageIcon(pathToIcon1));
        }
        jLabel1.updateUI();
        jLabel1.getParent().validate();
    }
    
    private static final Logger LOG = Logger.getLogger(backgroundtest.class.getName());

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws MalformedURLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(backgroundtest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(backgroundtest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(backgroundtest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(backgroundtest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new backgroundtest().setVisible(true);
            }
        });
        
        File tFile = new File(pathToIcon1);
        tFile.delete();
        tFile = new File(pathToIcon2);
        tFile.delete();
        tFile = null;
               
    }
    
    private ImageIcon getImageIcon(String path) {
        System.out.println("getImageIcon called: " + path);
        ImageIcon returnIcon;
        File f = new File(path);
        if (f.exists() == true) {
            returnIcon = new ImageIcon(path);
            System.out.println("getImageIcon called: " + path + "     returned!");
            return returnIcon; 
        } 
        return null;
    }
    
    private ImageIcon getImageIcon2(String path) {
        ImageIcon returnIcon = null;
        File f = new File(path);
        if (f.exists() == true) {
            BufferedImage iconImage;
            try {
                iconImage = ImageIO.read(f);
                returnIcon.setImage(iconImage);               
            } catch (IOException ex) {
                System.err.println("ERROR reading image. " + ex.getMessage());
                Logger.getLogger(backgroundtest.class.getName()).log(Level.SEVERE, null, ex);
            }
            return returnIcon;
        }
        return null;
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
